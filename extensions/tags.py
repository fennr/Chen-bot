import logging
import typing as t
from difflib import get_close_matches
from itertools import chain

import hikari
import lightbulb
import miru

from etc import constants as const
from etc.text import tags as txt
from models import AuthorOnlyNavigator
from models import ChenSlashContext
from models import Tag
from models.bot import ChenBot
from models.plugin import ChenPlugin
from utils import helpers

logger = logging.getLogger(__name__)

tags = ChenPlugin("Tag", include_datastore=True)


class TagEditorModal(miru.Modal):
    """Modal for creation and editing of tags."""

    def __init__(self, name: t.Optional[str] = None, content: t.Optional[str] = None) -> None:
        title = "–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫–∏"
        if content:
            title = f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏ {name}"

        super().__init__(title, timeout=600, autodefer=False)

        if not content:
            self.add_item(
                miru.TextInput(
                    label=txt.title.TagName,
                    placeholder=txt.desc.TagName,
                    required=True,
                    min_length=3,
                    max_length=100,
                    value=name,
                )
            )
        self.add_item(
            miru.TextInput(
                label=txt.title.TagContent,
                style=hikari.TextInputStyle.PARAGRAPH,
                placeholder=txt.desc.TagContent,
                required=True,
                max_length=1500,
                value=content,
            )
        )

        self.tag_name = ""
        self.tag_content = ""

    async def callback(self, ctx: miru.ModalContext) -> None:
        if not ctx.values:
            return

        for item, value in ctx.values.items():
            assert isinstance(item, miru.TextInput)
            if item.label == txt.title.TagName:
                self.tag_name = value
            elif item.label == txt.title.TagContent:
                self.tag_content = value


@tags.command
@lightbulb.option("ephemeral", "–ï—Å–ª–∏ True, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–∫, —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤—ã –≤–∏–¥–∏—Ç–µ", type=bool, default=False)
@lightbulb.option("name", "–ò–º—è –º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å", autocomplete=True)
@lightbulb.command("tag", "–í—ã–∑–≤–∞—Ç—å –º–µ—Ç–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", pass_options=True)
@lightbulb.implements(lightbulb.SlashCommand)
async def tag_cmd(ctx: ChenSlashContext, name: str, ephemeral: bool = False) -> None:
    assert ctx.guild_id is not None

    tag = await Tag.fetch(name.casefold(), ctx.guild_id, add_use=True)

    if not tag:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå Unknown tag",
                description="Cannot find tag by that name.",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return
    flags = hikari.MessageFlag.EPHEMERAL if ephemeral else hikari.MessageFlag.NONE
    await ctx.respond(content=tag.parse_content(ctx), flags=flags)


@tag_cmd.autocomplete("name")
async def tag_name_ac(
    option: hikari.AutocompleteInteractionOption, interaction: hikari.AutocompleteInteraction
) -> t.List[str]:
    #if option.value and interaction.guild_id:
    return (await Tag.fetch_closest_names(str(option.value), interaction.guild_id)) or []
    #return []


@tags.command
@lightbulb.command("tags", "All commands for managing tags.")
@lightbulb.implements(lightbulb.SlashCommandGroup)
async def tag_group(ctx: ChenSlashContext) -> None:
    pass


@tag_group.child
@lightbulb.command("create", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–µ—Ç–∫—É. –û—Ç–∫—Ä–æ–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ")
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_create(ctx: ChenSlashContext) -> None:

    assert ctx.guild_id is not None and ctx.member is not None

    modal = TagEditorModal()
    await modal.send(ctx.interaction)
    await modal.wait()
    if not modal.values:
        return

    mctx = modal.get_response_context()

    tag = await Tag.fetch(modal.tag_name.casefold(), ctx.guild_id)
    if tag:
        await mctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ú–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                description=f"–≠—Ç–∞ –º–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ï—Å–ª–∏ –µ–µ –∞–≤—Ç–æ—Ä–∞ —É–∂–µ –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/tags claim {modal.tag_name.casefold()}`",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return

    tag = await Tag.create(
        guild=ctx.guild_id,
        name=modal.tag_name.casefold(),
        owner=ctx.author,
        creator=ctx.author,
        aliases=[],
        content=modal.tag_content,
    )

    await mctx.respond(
        embed=hikari.Embed(
            title="‚úÖ –ú–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
            description=f"–ï–µ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π `/tag {tag.name}`",
            color=const.EMBED_GREEN,
        )
    )


@tag_group.child
@lightbulb.option("name", "–ò–º—è –º–µ—Ç–∫–∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", autocomplete=True)
@lightbulb.command("info", "–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–∫–µ", pass_options=True)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_info(ctx: ChenSlashContext, name: str) -> None:
    assert ctx.guild_id is not None
    tag = await Tag.fetch(name.casefold(), ctx.guild_id)

    if not tag:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç–∫–∞",
                description="–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–µ—Ç–∫—É –ø–æ –∏–º–µ–Ω–∏",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return

    owner = ctx.app.cache.get_member(ctx.guild_id, tag.owner_id) or tag.owner_id
    creator = (
        (ctx.app.cache.get_member(ctx.guild_id, tag.creator_id) or tag.creator_id) if tag.creator_id else "Unknown"
    )
    aliases = ", ".join(tag.aliases) if tag.aliases else None

    embed = hikari.Embed(
        title=f"üí¨ –ú–µ—Ç–∫–∞: {tag.name}",
        description=f"**–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:** `{aliases}`\n**–í–ª–∞–¥–µ–ª–µ—Ü:** `{owner}`\n**–°–æ–∑–¥–∞—Ç–µ–ª—å:** `{creator}`\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:** `{tag.uses}`",
        color=const.EMBED_BLUE,
    )
    if isinstance(owner, hikari.Member):
        embed.set_author(name=str(owner), icon=owner.display_avatar_url)

    await ctx.respond(embed=embed)


@tag_info.autocomplete("name")
async def tag_info_name_ac(
    option: hikari.AutocompleteInteractionOption, interaction: hikari.AutocompleteInteraction
) -> t.List[str]:
    if option.value and interaction.guild_id:
        return (await Tag.fetch_closest_names(str(option.value), interaction.guild_id)) or []
    return []


@tag_group.child
@lightbulb.option("alias", "–î–æ–±–∞–≤–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º –∫ –º–µ—Ç–∫–µ")
@lightbulb.option("name", "–ú–µ—Ç–∫–∞ –∫ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Å–µ–≤–¥–æ–Ω–∏–º", autocomplete=True)
@lightbulb.command("alias", "–î–æ–±–∞–≤–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º –∫ –≤–∞—à–µ–π –º–µ—Ç–∫–µ", pass_options=True)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_alias(ctx: ChenSlashContext, name: str, alias: str) -> None:
    assert ctx.guild_id is not None

    alias_tag = await Tag.fetch(alias.casefold(), ctx.guild_id)
    if alias_tag:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ü—Å–µ–≤–¥–æ–Ω–∏–º –∑–∞–Ω—è—Ç",
                description=f"–ú–µ—Ç–∫–∞ –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ –∑–∞–Ω—è—Ç—ã, —Å–º–µ–Ω–∏—Ç–µ –∏–º—è",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return

    tag = await Tag.fetch(name.casefold(), ctx.guild_id)

    if tag and tag.owner_id == ctx.author.id:
        tag.aliases = tag.aliases if tag.aliases else []

        if alias.casefold() not in tag.aliases and len(tag.aliases) <= 5:
            tag.aliases.append(alias.casefold())

        else:
            await ctx.respond(
                embed=hikari.Embed(
                    title="‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤",
                    description=f"–ú–µ—Ç–∫–∞ `{tag.name}` –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–æ **5** –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤",
                    color=const.ERROR_COLOR,
                ),
                flags=hikari.MessageFlag.EPHEMERAL,
            )
            return

        await tag.update()

        await ctx.respond(
            embed=hikari.Embed(
                title="‚úÖ –ú–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
                description=f"–ü—Å–µ–≤–¥–æ–Ω–∏–º —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–µ—Ç–∫–∏`{tag.name}`!\n–¢–µ–ø–µ—Ä—å –µ–µ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫ –∂–µ –∫–æ–º–∞–Ω–¥–æ–π `/tag {alias.casefold()}`",
                color=const.EMBED_GREEN,
            )
        )

    else:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –º–µ—Ç–∫–∞",
                description="–í—ã –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –º–µ—Ç–∫–∏, –ª–∏–±–æ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return


@tag_alias.autocomplete("name")
async def tag_alias_name_ac(
    option: hikari.AutocompleteInteractionOption, interaction: hikari.AutocompleteInteraction
) -> t.List[str]:
    if option.value and interaction.guild_id:
        return (await Tag.fetch_closest_owned_names(str(option.value), interaction.guild_id, interaction.user)) or []
    return []


@tag_group.child
@lightbulb.option("alias", "–ò–º—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
@lightbulb.option("name", "–ú–µ—Ç–∫–∞ –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", autocomplete=True)
@lightbulb.command("delalias", "–£–¥–∞–ª–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏–∑ –º–µ—Ç–∫–∏", pass_options=True)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_delalias(ctx: ChenSlashContext, name: str, alias: str) -> None:
    assert ctx.guild_id is not None

    tag = await Tag.fetch(name.casefold(), ctx.guild_id)
    if tag and tag.owner_id == ctx.author.id:

        if tag.aliases and alias.casefold() in tag.aliases:
            tag.aliases.remove(alias.casefold())

        else:
            await ctx.respond(
                embed=hikari.Embed(
                    title="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º",
                    description=f"–ú–µ—Ç–∫–∞ `{tag.name}` –Ω–µ –∏–º–µ–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ `{alias.casefold()}`",
                    color=const.ERROR_COLOR,
                ),
                flags=hikari.MessageFlag.EPHEMERAL,
            )
            return

        await tag.update()

        await ctx.respond(
            embed=hikari.Embed(
                title="‚úÖ –ü—Å–µ–≤–∏–¥–æ–Ω–∏–º —É–¥–∞–ª–µ–Ω",
                description=f"–ü—Å–µ–≤–¥–æ–Ω–∏–º `{alias.casefold()}` –º–µ—Ç–∫–∏ `{tag.name}` –±—ã–ª —É–¥–∞–ª–µ–Ω",
                color=const.EMBED_GREEN,
            )
        )

    else:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –º–µ—Ç–∫–∞",
                description="–í—ã –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –º–µ—Ç–∫–∏, –ª–∏–±–æ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return


@tag_delalias.autocomplete("name")
async def tag_delalias_name_ac(
    option: hikari.AutocompleteInteractionOption, interaction: hikari.AutocompleteInteraction
) -> t.List[str]:
    if option.value and interaction.guild_id:
        return (await Tag.fetch_closest_owned_names(str(option.value), interaction.guild_id, interaction.user)) or []
    return []


@tag_group.child
@lightbulb.option("receiver", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç –º–µ—Ç–∫—É", type=hikari.Member)
@lightbulb.option("name", "–ò–º—è –º–µ—Ç–∫–∏", autocomplete=True)
@lightbulb.command(
    "transfer",
    "–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –º–µ—Ç–∫—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
    pass_options=True,
)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_transfer(ctx: ChenSlashContext, name: str, receiver: hikari.Member) -> None:
    helpers.is_member(receiver)
    assert ctx.guild_id is not None

    tag = await Tag.fetch(name.casefold(), ctx.guild_id)

    if tag and tag.owner_id == ctx.author.id:

        tag.owner_id = receiver.id
        await tag.update()

        await ctx.respond(
            embed=hikari.Embed(
                title="‚úÖ –ú–µ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞",
                description=f"–ú–µ—Ç–∫–∞ `{tag.name}` —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ {receiver.mention}",
                color=const.EMBED_GREEN,
            )
        )

    else:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –º–µ—Ç–∫–∞",
                description="–í—ã –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –º–µ—Ç–∫–∏, –ª–∏–±–æ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return


@tag_transfer.autocomplete("name")
async def tag_transfer_name_ac(
    option: hikari.AutocompleteInteractionOption, interaction: hikari.AutocompleteInteraction
) -> t.List[str]:
    if option.value and interaction.guild_id:
        return (await Tag.fetch_closest_owned_names(str(option.value), interaction.guild_id, interaction.user)) or []
    return []


@tag_group.child
@lightbulb.option("name", "–ò–º—è –º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è", autocomplete=True)
@lightbulb.command(
    "claim",
    "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –º–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ–∫–∏–Ω—É–≤—à–∏–º —Å–µ—Ä–≤–µ—Ä",
    pass_options=True,
)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_claim(ctx: ChenSlashContext, name: str) -> None:

    assert ctx.guild_id is not None and ctx.member is not None

    tag = await Tag.fetch(name.casefold(), ctx.guild_id)

    if tag:
        members = ctx.app.cache.get_members_view_for_guild(ctx.guild_id)
        if tag.owner_id not in members.keys() or (
            helpers.includes_permissions(
                lightbulb.utils.permissions_for(ctx.member), hikari.Permissions.MANAGE_MESSAGES
            )
            and tag.owner_id != ctx.member.id
        ):
            tag.owner_id = ctx.author.id
            await tag.update()

            await ctx.respond(
                embed=hikari.Embed(
                    title="‚úÖ –ú–µ—Ç–∫–∞ –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–æ–µ–Ω–∞",
                    description=f"–ú–µ—Ç–∫–∞ `{tag.name}` —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Ç–µ–±—è",
                    color=const.EMBED_GREEN,
                )
            )

        else:
            await ctx.respond(
                embed=hikari.Embed(
                    title="‚ùå –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü",
                    description="–ó–∞—è–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –º–µ—Ç–∫–∏, —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Ä–≤–µ—Ä",
                    color=const.ERROR_COLOR,
                ),
                flags=hikari.MessageFlag.EPHEMERAL,
            )
            return

    else:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç–∫–∞",
                description="–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–µ—Ç–∫—É –ø–æ –∏–º–µ–Ω–∏",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return


@tag_claim.autocomplete("name")
async def tag_claim_name_ac(
    option: hikari.AutocompleteInteractionOption, interaction: hikari.AutocompleteInteraction
) -> t.List[str]:
    if option.value and interaction.guild_id:
        return (await Tag.fetch_closest_owned_names(str(option.value), interaction.guild_id, interaction.user)) or []
    return []


@tag_group.child
@lightbulb.option("name", "–ò–º—è –∏–∑–º–µ–Ω—è–µ–º–æ–π –º–µ—Ç–∫–∏", autocomplete=True)
@lightbulb.command("edit", "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–π –≤–∞–º –º–µ—Ç–∫–∏", pass_options=True)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_edit(ctx: ChenSlashContext, name: str) -> None:

    assert ctx.member is not None and ctx.guild_id is not None

    tag = await Tag.fetch(name.casefold(), ctx.guild_id)

    if not tag or tag.owner_id != ctx.author.id:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –º–µ—Ç–∫–∞",
                description="–í—ã –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –º–µ—Ç–∫–∏, –ª–∏–±–æ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return

    modal = TagEditorModal(name=tag.name, content=tag.content)
    await modal.send(ctx.interaction)
    await modal.wait()
    if not modal.values:
        return

    mctx = modal.get_response_context()

    tag.content = modal.tag_content

    await tag.update()

    await mctx.respond(
        embed=hikari.Embed(
            title="‚úÖ –ú–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞",
            description=f"–ú–µ—Ç–∫–∞ `{tag.name}` –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞",
            color=const.EMBED_GREEN,
        )
    )


@tag_edit.autocomplete("name")
async def tag_edit_name_ac(
    option: hikari.AutocompleteInteractionOption, interaction: hikari.AutocompleteInteraction
) -> t.List[str]:
    if option.value and interaction.guild_id:
        return (await Tag.fetch_closest_owned_names(str(option.value), interaction.guild_id, interaction.user)) or []
    return []


@tag_group.child
@lightbulb.option("name", "–ò–º—è –º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", autocomplete=True)
@lightbulb.command("delete", "–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", pass_options=True)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_delete(ctx: ChenSlashContext, name: str) -> None:

    assert ctx.member is not None and ctx.guild_id is not None

    tag = await Tag.fetch(name.casefold(), ctx.guild_id)

    if tag and (
        (tag.owner_id == ctx.author.id)
        or helpers.includes_permissions(lightbulb.utils.permissions_for(ctx.member), hikari.Permissions.MANAGE_MESSAGES)
    ):

        await tag.delete()

        await ctx.respond(
            embed=hikari.Embed(
                title="‚úÖ –ú–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞",
                description=f"–ú–µ—Ç–∫–∞ `{tag.name}` –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                color=const.EMBED_GREEN,
            )
        )

    else:
        await ctx.respond(
            embed=hikari.Embed(
                title="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –º–µ—Ç–∫–∞",
                description="–í—ã –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –º–µ—Ç–∫–∏, –ª–∏–±–æ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                color=const.ERROR_COLOR,
            ),
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return


@tag_delete.autocomplete("name")
async def tag_delete_name_ac(
    option: hikari.AutocompleteInteractionOption, interaction: hikari.AutocompleteInteraction
) -> t.List[str]:
    if option.value and interaction.guild_id:
        return (await Tag.fetch_closest_owned_names(str(option.value), interaction.guild_id, interaction.user)) or []
    return []


@tag_group.child
@lightbulb.option("owner", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type=hikari.User, required=False)
@lightbulb.command("list", "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ç–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", pass_options=True)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_list(ctx: ChenSlashContext, owner: t.Optional[hikari.User] = None) -> None:
    assert ctx.member is not None and ctx.guild_id is not None

    tags = await Tag.fetch_all(ctx.guild_id, owner)

    if tags:
        tags_fmt = [f"**#{i+1}** - `{tag.uses}` –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: `{tag.name}`" for i, tag in enumerate(tags)]
        # Only show 8 tags per page
        tags_fmt = [tags_fmt[i * 8 : (i + 1) * 8] for i in range((len(tags_fmt) + 8 - 1) // 8)]

        embeds = [
            hikari.Embed(
                title=f"üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–∫–∏{f' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner.username}' if owner else ''}:",
                description="\n".join(contents),
                color=const.EMBED_BLUE,
            )
            for contents in tags_fmt
        ]

        navigator = AuthorOnlyNavigator(ctx, pages=embeds)  # type: ignore
        await navigator.send(ctx.interaction)

    else:
        await ctx.respond(
            embed=hikari.Embed(
                title=f"üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–∫–∏{f' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner.username}' if owner else ''}:",
                description="–ú–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –∏—Ö —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π`/tags create`",
                color=const.EMBED_BLUE,
            )
        )


@tag_group.child
@lightbulb.option("query", "–ò–º—è –º–µ—Ç–∫–∏ –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞")
@lightbulb.command("search", "–ü–æ–∏—Å–∫ –º–µ—Ç–æ–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º—É", pass_options=True)
@lightbulb.implements(lightbulb.SlashSubCommand)
async def tag_search(ctx: ChenSlashContext, query: str) -> None:

    assert ctx.member is not None and ctx.guild_id is not None

    tags = await Tag.fetch_all(ctx.guild_id)

    if tags:
        names = [tag.name for tag in tags]
        aliases = [tag.aliases for tag in tags if tag.aliases]
        aliases = list(chain(*aliases))

        response = [name for name in get_close_matches(query.casefold(), names)]
        response += [f"*{alias}*" for alias in get_close_matches(query.casefold(), aliases)]

        if response:
            await ctx.respond(
                embed=hikari.Embed(title=f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}':", description="\n".join(response[:10]))
            )

        else:
            await ctx.respond(
                embed=hikari.Embed(
                    title="–ù–µ –Ω–∞–π–¥–µ–Ω—ã",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–∫–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º",
                    color=const.WARN_COLOR,
                )
            )

    else:
        await ctx.respond(
            embed=hikari.Embed(
                title="üîé –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
                description="–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ç–æ–∫. –ò—Ö –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π `/tags create`",
                color=const.WARN_COLOR,
            )
        )


def load(bot: ChenBot) -> None:
    bot.add_plugin(tags)


def unload(bot: ChenBot) -> None:
    bot.remove_plugin(tags)


# Copyright (C) 2022-present HyperGH

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see: https://www.gnu.org/licenses
